class DOMHelper{static clearEventListners(element){const clonedElement=element.cloneNode(!0);return element.replaceWith(clonedElement),clonedElement}static moveElement(elementId,newDestinationSelector){const element=document.getElementById(elementId),destinationElement=document.querySelector(newDestinationSelector);destinationElement.append(element)}}class Component{constructor(hostElementId,insertBefore=!1){this.hostElement=hostElementId||document.body,this.insertBefore=insertBefore}detach=()=>{this.element&&this.element.remove()};show(){this.hostElement.insertAdjacentElement(this.insertBefore?"afterbegin":"beforeend",this.element)}}class Tooltip extends Component{constructor(closeNotifierFunction){super(),this.closeNoti=closeNotifierFunction,this.render()}closeTooltip=()=>{this.detach()};render(){const tooltipElement=document.createElement("div");tooltipElement.className="card",tooltipElement.textContent="DUMMY",tooltipElement.addEventListener("click",this.closeTooltip),this.element=tooltipElement}}class ProjectItem{hasActiveToolTip=!1;constructor(id,updateProjectListsFunction,type){this.id=id,this.updateProjectListsHandler=updateProjectListsFunction,this.connectMoreInfoButton(),this.connectSwitchButton()}showMoreInfoHandler(){if(this.hasActiveToolTip)return;const tooltip=new Tooltip(()=>{this.hasActiveToolTip=!1});tooltip.show(),this.hasActiveToolTip=!0}connectMoreInfoButton(){const projectItemElement=document.getElementById(this.id),moreInfoBtn=projectItemElement.querySelector("button");moreInfoBtn.addEventListener("click",this.showMoreInfoHandler)}connectSwitchButton(type){const projectItemElement=document.getElementById(this.id);let switchBtn=projectItemElement.querySelector("button:last-of-type");switchBtn=DOMHelper.clearEventListners(switchBtn),switchBtn.textContent="active"===type?"Finish":"Activate",switchBtn.addEventListener("click",this.updateProjectListsHandler.bind(null,this.id))}update(updateProjectListsFunction,type){this.updateProjectListsHandler=updateProjectListsFunction,this.connectSwitchButton(type)}}class ProjectList{projects=[];constructor(type){this.type=type;const prjItems=document.querySelectorAll(`#${type}-projects li`);for(const prjItem of prjItems)this.projects.push(new ProjectItem(prjItem.id,this.switchProject.bind(this),this.type));console.log(this.projects)}setSwitchHandlerFunction(switchHandlerFunction){this.switchHandeler=switchHandlerFunction}addProject(project){this.projects.push(project),DOMHelper.moveElement(project.id,`#${this.type}-projects ul`),project.update(this.switchProject.bind(this),this.type)}switchProject(projectId){this.switchHandeler(this.projects.find(p=>p.id===projectId)),this.projects=this.projects.filter(p=>p.id!==projectId)}}class App{static run(){const activeProjectsList=new ProjectList("active"),finishedProjectsList=new ProjectList("finished");activeProjectsList.setSwitchHandlerFunction(finishedProjectsList.addProject.bind(finishedProjectsList)),finishedProjectsList.setSwitchHandlerFunction(activeProjectsList.addProject.bind(activeProjectsList))}}App.run();